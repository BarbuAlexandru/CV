<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stapan = pointer_null;
reproducere = 0;
next_gen = 0;

input_1 = 0;
input_2 = 0;
input_3 = 0;

output_1 = 0;
output_2 = 0;


    //INITIALIZARE ARHITECTURA BRAIN

//IN LAYER
nod_in_1 = instance_create(0,0,obj_nod_in);
nod_in_1.name = "nod_in_1";
nod_in_2 = instance_create(0,0,obj_nod_in);
nod_in_2.name = "nod_in_2";
nod_in_3 = instance_create(0,0,obj_nod_in);
nod_in_3.name = "nod_in_3";

//HIDDEN LAYER
nod_hidden_1 = instance_create(0,0,obj_nod_hidden_L1);
nod_hidden_1.name = "nod_hidden_1";
nod_hidden_2 = instance_create(0,0,obj_nod_hidden_L1);
nod_hidden_2.name = "nod_hidden_2";
nod_hidden_3 = instance_create(0,0,obj_nod_hidden_L1);
nod_hidden_3.name = "nod_hidden_3";
nod_hidden_4 = instance_create(0,0,obj_nod_hidden_L1);
nod_hidden_4.name = "nod_hidden_4";

//OUT LAYER
nod_out_1 = instance_create(0,0,obj_nod_out);
nod_out_1.name = "nod_out_1";
nod_out_2 = instance_create(0,0,obj_nod_out);
nod_out_2.name = "nod_out_2";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(nod_in_1, true)
instance_destroy(nod_in_2, true)
instance_destroy(nod_in_3, true)

instance_destroy(nod_hidden_1, true)
instance_destroy(nod_hidden_2, true)
instance_destroy(nod_hidden_3, true)
instance_destroy(nod_hidden_4, true)

instance_destroy(nod_out_1, true)
instance_destroy(nod_out_2, true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CALCUL NEURAL

// IN
nod_in_1.input_1 = input_1;
nod_in_2.input_1 = input_2;
nod_in_3.input_1 = input_3;

// HIDDEN
nod_hidden_1.input_1 = nod_in_1.output_1;
nod_hidden_1.input_2 = nod_in_2.output_1;
nod_hidden_1.input_3 = nod_in_3.output_1;
    //
nod_hidden_2.input_1 = nod_in_1.output_1;
nod_hidden_2.input_2 = nod_in_2.output_1;
nod_hidden_2.input_3 = nod_in_3.output_1;
    //
nod_hidden_3.input_1 = nod_in_1.output_1;
nod_hidden_3.input_2 = nod_in_2.output_1;
nod_hidden_3.input_3 = nod_in_3.output_1;
    //
nod_hidden_4.input_1 = nod_in_1.output_1;
nod_hidden_4.input_2 = nod_in_2.output_1;
nod_hidden_4.input_3 = nod_in_3.output_1;

// OUT
nod_out_1.input_1 = nod_hidden_1.output_1;
nod_out_1.input_2 = nod_hidden_2.output_1;
nod_out_1.input_3 = nod_hidden_3.output_1;
nod_out_1.input_4 = nod_hidden_4.output_1;
    //
nod_out_2.input_1 = nod_hidden_1.output_1;
nod_out_2.input_2 = nod_hidden_2.output_1;
nod_out_2.input_3 = nod_hidden_3.output_1;
nod_out_2.input_4 = nod_hidden_4.output_1;


//OUT BRAIN TOTAL
output_1 = nod_out_1.output_1;
output_2 = nod_out_2.output_1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPRODUCERE

if(reproducere == 1){
    if( nod_in_1.next_gen == 1 &amp;&amp; nod_in_2.next_gen == 1 &amp;&amp; nod_in_3.next_gen == 1 &amp;&amp; 
        nod_hidden_1.next_gen==1 &amp;&amp; nod_hidden_2.next_gen==1 &amp;&amp; nod_hidden_3.next_gen==1 &amp;&amp; nod_hidden_4.next_gen==1 &amp;&amp; 
        nod_out_1.next_gen == 1 &amp;&amp; nod_out_2.next_gen == 1){
            next_gen = 1;
            reproducere = 0;
    }else{
    nod_in_1.reproducere = 1;
    nod_in_2.reproducere = 1;
    nod_in_3.reproducere = 1;
    
    nod_hidden_1.reproducere = 1;
    nod_hidden_2.reproducere = 1;
    nod_hidden_3.reproducere = 1;
    nod_hidden_4.reproducere = 1;
    
    nod_out_1.reproducere = 1;
    nod_out_2.reproducere = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(100,100, string(output_1) + "   "+ string(output_2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
