<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = obj_game.y_std;
x = obj_game.x_std;

culoare = make_colour_rgb(int64(random_range(0,256)), int64(random_range(0,256)), int64(random_range(0,256))); 
reproducere = 0;
next_gen = 0;

points = 0;
dead = 0;
max_cadere = obj_joc_suprem.max_cadere;
fly_power = obj_joc_suprem.fly_power;
vsp = 0;
grav = obj_joc_suprem.grav;

dist_norm = 0;
inalt_norm = 0;
vit_nrom = 0;

brain = instance_create(0,0, obj_brain);
brain.stapan = instance_id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead == 0){
    key_fly = keyboard_check_released(vk_space);
    
    //CALCUL VALORI NROMALE
    if(instance_exists(obj_interes)){
        dist_norm = (obj_interes.x - x) / room_width;
        inalt_norm = (obj_interes.y - y) / room_height;
        
        if(abs(dist_norm) &gt; 1)
            dist_norm = sign(dist_norm) * 1;
        if(abs(inalt_norm) &gt; 1)
            inalt_norm = sign(inalt_norm) * 1;
    }else{
        show_message("AOLEU");
        dist_nrom = 0;
        inalt_norm = 0;
    }
    vit_norm = vsp / fly_power;
    if(abs(vit_norm) &gt; 1)
            vit_norm = sign(vit_norm) * 1;
    
//Actionare
    if((key_fly == 1 || brain.output_1 &gt; brain.output_2) &amp;&amp; vsp &gt;= obj_joc_suprem.activ_bloc_sar){
        vsp = -fly_power;
        decizie_anterioara = 1;
    }else{
        if(vsp &lt; max_cadere)
            vsp += grav;
        else
            vsp = max_cadere;
        decizie_anterioara = 0;
    }
                
// TRIMITERE INPUT
    brain.input_1 = dist_norm;
    brain.input_2 = inalt_norm;
    brain.input_3 = vit_norm;
        
    y+=vsp;
    
    if(place_meeting(x,y,obj_obstacol) || place_meeting(x,y,obj_wall)){
        dead = 1;
    } 
    
    points += 0.01;
    
}else{
    x-=obj_game.hsp;
    if((x &lt; -sprite_get_width(spr_player)) &amp;&amp; (instance_number(obj_player) &gt; 1)){
        instance_destroy(brain);
        brain = pointer_null;
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REPRODUCERE
if(brain != pointer_null){
    if(reproducere == 1){
        if(brain.next_gen == 1){
            next_gen = 1;
            reproducere = 0;
            //show_message("NEXT GEN " + string(points));
            room_restart();
        }else{
            brain.reproducere = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_player, 0, x, y,1,1,0,culoare,1);



//draw_text(x - sprite_get_width(spr_player)/2,y-sprite_get_width(spr_player),string(points));
//draw_text(x - sprite_get_width(spr_player)/2,y-sprite_get_width(spr_player)-15,string(decizie))


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
