<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1080, 1920);
draw_set_halign(fa_center);
draw_set_font(fnt_std);

timp_ramas = 30*10;
timp_total = timp_ramas;

nr_animale = 56;

animale_folosite = array_create(nr_animale);
for(i=0; i&lt;nr_animale; i++){
    animale_folosite[i]=0;
}
animal_folosit_min = 0;

animal_cerut = 0;
animal_dat = 0;

next_animal = 0;
last_animal = 0;

timp_next_lvl = -1;
timp_next_lvl_total = 30;

next_level=1;

apasat_bariera = 0;

scor_curent= 0;
scor_total= 0;

switch(room){
    case game:
        dificultate=20;
        adaos_dif = 0.25;
    break;
    case game_hard:
        dificultate=40;
        adaos_dif = 1;
    break;
}
    
instance_create(0,0,obj_bg);
instance_create(15,15,obj_button_exit);
instance_create(15,300,obj_press_here);

virtual_key_add(15,300, 1050, 1050, ord("P"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NEXT LEVEL = 1

if(next_level == 1){

    animal_dat = 0;
    animal_cerut = 0;

    next_level = 0;
    
    dificultate += adaos_dif;
    
//Alegere Animal
    
    animal_folosit_min = animale_folosite[0];
    for(i=0; i&lt;nr_animale; i++){
        if(animale_folosite[i]&lt;animal_folosit_min)
            animal_folosit_min = animale_folosite[i];
    }
    
    next_animal = irandom(nr_animale-1) + 1;
    
    while(next_animal == last_animal){
        next_animal = irandom(nr_animale-1) + 1;
    }
    
    while(animale_folosite[next_animal-1] != animal_folosit_min){
        next_animal = irandom(nr_animale-1) + 1;
    }
    
    animale_folosite[next_animal-1] += 1;
    
    last_animal = next_animal;
    
//Creare Bariera
    
    for (i = 0; i &lt; 21; i += 1){
        for (j = 0; j &lt; 21; j += 1){
            instance_create(15 + i*50,300 + j*50,obj_bariera);
        }
    }
    
    
//Marele Switch
    
    switch(next_animal){
    case 1:
        instance_create(0,0, obj_animal_1);
    break;
    case 2:
        instance_create(0,0, obj_animal_2);
    break;
    case 3:
        instance_create(0,0, obj_animal_3);
    break;
    case 4:
        instance_create(0,0, obj_animal_4);
    break;
    case 5:
        instance_create(0,0, obj_animal_5);
    break;
    case 6:
        instance_create(0,0, obj_animal_6);
    break;
    case 7:
        instance_create(0,0, obj_animal_7);
    break;
    case 8:
        instance_create(0,0, obj_animal_8);
    break;
    case 9:
        instance_create(0,0, obj_animal_9);
    break;
    case 10:
        instance_create(0,0, obj_animal_10);
    break;
    case 11:
        instance_create(0,0, obj_animal_11);
    break;
    case 12:
        instance_create(0,0, obj_animal_12);
    break;
    case 13:
        instance_create(0,0, obj_animal_13);
    break;
    case 14:
        instance_create(0,0, obj_animal_14);
    break;
    case 15:
        instance_create(0,0, obj_animal_15);
    break;
    case 16:
        instance_create(0,0, obj_animal_16);
    break;
    case 17:
        instance_create(0,0, obj_animal_17);
    break;
    case 18:
        instance_create(0,0, obj_animal_18);
    break;
    case 19:
        instance_create(0,0, obj_animal_19);
    break;
    case 20:
        instance_create(0,0, obj_animal_20);
    break;
    case 21:
        instance_create(0,0, obj_animal_21);
    break;
    case 22:
        instance_create(0,0, obj_animal_22);
    break;
    case 23:
        instance_create(0,0, obj_animal_23);
    break;
    case 24:
        instance_create(0,0, obj_animal_24);
    break;
    case 25:
        instance_create(0,0, obj_animal_25);
    break;
    case 26:
        instance_create(0,0, obj_animal_26);
    break;
    case 27:
        instance_create(0,0, obj_animal_27);
    break;
    case 28:
        instance_create(0,0, obj_animal_28);
    break;
    case 29:
        instance_create(0,0, obj_animal_29);
    break;
    case 30:
        instance_create(0,0, obj_animal_30);
    break;
    case 31:
        instance_create(0,0, obj_animal_31);
    break;
    case 32:
        instance_create(0,0, obj_animal_32);
    break;
    case 33:
        instance_create(0,0, obj_animal_33);
    break;
    case 34:
        instance_create(0,0, obj_animal_34);
    break;
    case 35:
        instance_create(0,0, obj_animal_35);
    break;
    case 36:
        instance_create(0,0, obj_animal_36);
    break;
    case 37:
        instance_create(0,0, obj_animal_37);
    break;
    case 38:
        instance_create(0,0, obj_animal_38);
    break;
    case 39:
        instance_create(0,0, obj_animal_39);
    break;
    case 40:
        instance_create(0,0, obj_animal_40);
    break;
    case 41:
        instance_create(0,0, obj_animal_41);
    break;
    case 42:
        instance_create(0,0, obj_animal_42);
    break;
    case 43:
        instance_create(0,0, obj_animal_43);
    break;
    case 44:
        instance_create(0,0, obj_animal_44);
    break;
    case 45:
        instance_create(0,0, obj_animal_45);
    break;
    case 46:
        instance_create(0,0, obj_animal_46);
    break;
    case 47:
        instance_create(0,0, obj_animal_47);
    break;
    case 48:
        instance_create(0,0, obj_animal_48);
    break;
    case 49:
        instance_create(0,0, obj_animal_49);
    break;
    case 50:
        instance_create(0,0, obj_animal_50);
    break;
    case 51:
        instance_create(0,0, obj_animal_51);
    break;
    case 52:
        instance_create(0,0, obj_animal_52);
    break;
    case 53:
        instance_create(0,0, obj_animal_53);
    break;
    case 54:
        instance_create(0,0, obj_animal_54);
    break;
    case 55:
        instance_create(0,0, obj_animal_55);
    break;
    case 56:
        instance_create(0,0, obj_animal_56);
    break;
    
    }
    
    animal_cerut = next_animal;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NEXT LEVEL = 0

if(next_level == 0 &amp;&amp; timp_next_lvl == -1){

    if((animal_dat != 0) &amp;&amp; (animal_cerut != 0)){
        if(animal_cerut == animal_dat){
            scor_total += scor_curent;
            timp_next_lvl = timp_next_lvl_total;
            
            timp_ramas += (scor_curent/dificultate)*60;
            if(timp_ramas&gt;timp_total){
                timp_ramas = timp_total;
            }
            
            if(obj_lvl_mec_sound.sunet == 1)
                audio_play_sound(snd_right, 20, false);
            
        }else{
            timp_next_lvl = timp_next_lvl_total;
            if(obj_lvl_mec_sound.sunet == 1)
                audio_play_sound(snd_wrong, 20, false);
        }
    }



}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///timp_next_lvl != 0 

if(timp_next_lvl &gt; -1){

    timp_next_lvl-=1;

}

if(timp_next_lvl == 0){
    timp_next_lvl=-1;
    next_level = 1;
    best_score = 0;
    
    switch(room){
    case game:
        if(file_exists("SaveScore.sav")){
            var LoadFile = file_text_open_read("SaveScore.sav");
            best_score = file_text_read_real(LoadFile);
            file_text_close(LoadFile);
        }

        if(best_score &lt; scor_total){
            if(file_exists("SaveScore.sav")){
                file_delete("SaveScore.sav");
            }
            var SaveFile = file_text_open_write("SaveScore.sav");
            file_text_write_real(SaveFile, scor_total);
            file_text_close(SaveFile);
        }
        
        if(file_exists("ScorCurent.sav")){
            file_delete("ScorCurent.sav");
        }
        var SaveFile = file_text_open_write("ScorCurent.sav");
        file_text_write_real(SaveFile, scor_total);
        file_text_close(SaveFile);
        
        if(animal_cerut != animal_dat){
            room_goto(game_lost)
        }
        
    break;
    case game_hard:
        if(file_exists("SaveScoreHard.sav")){
            var LoadFile = file_text_open_read("SaveScoreHard.sav");
            best_score = file_text_read_real(LoadFile);
            file_text_close(LoadFile);
        }

        if(best_score &lt; scor_total){
            if(file_exists("SaveScoreHard.sav")){
                file_delete("SaveScoreHard.sav");
            }
            var SaveFile = file_text_open_write("SaveScoreHard.sav");
            file_text_write_real(SaveFile, scor_total);
            file_text_close(SaveFile);
        }
        
        if(file_exists("ScorCurent.sav")){
            file_delete("ScorCurent.sav");
        }
        var SaveFile = file_text_open_write("ScorCurent.sav");
        file_text_write_real(SaveFile, scor_total);
        file_text_close(SaveFile);
        
        if(animal_cerut != animal_dat){
            room_goto(game_hard_lost)
        }
        
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

scor_curent = int64((instance_number(obj_bariera)*100) / (21*21));

if(scor_curent == 1 &amp;&amp; timp_next_lvl == -1){
    scor_total += scor_curent;
    timp_next_lvl = timp_next_lvl_total;
    scor_curent = 1;
}

if(keyboard_check(ord("P")))
    apasat_bariera = 1;
else
    apasat_bariera = 0;
    
    
if(timp_ramas &gt; 0 ){
    if(timp_next_lvl == -1)
        timp_ramas-=1;
}else{
    animal_dat = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room){
    case game:
    draw_text_transformed_colour(700, 15, "Normal Mode", 0.3, 0.3, 0, c_white, c_white, c_white, c_white, 1);
    break;
    case game_hard:
        draw_text_transformed_colour(700, 15, "Hard Mode", 0.3, 0.3, 0, c_white, c_white, c_white, c_white, 1);
    break;
}


draw_text_transformed_colour(700, 37, "Score " + string(scor_curent), 0.7, 0.7, 0, c_white, c_white, c_white, c_white, 1);

draw_text_transformed_colour(700, 98, "Total Score " + string(scor_total), 0.7, 0.7, 0, c_white, c_white, c_white, c_white, 1);




draw_text_transformed_colour(540, 1370, "Time", 0.7, 0.7, 0, c_white, c_white, c_white, c_white, 1);
draw_sprite(spr_bara_timp, 0, -1080 + (timp_ramas/timp_total)*1080,1460)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
