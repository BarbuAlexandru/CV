<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
obj_joc_suprem.nivel +=1;

points = 0.01;

grav = obj_joc_suprem.grav;
max_cadere = obj_joc_suprem.max_cadere;
fly_power = obj_joc_suprem.fly_power;

x_std = room_width/5;
y_std = room_height/2;
hsp = obj_joc_suprem.hsp;
timp_obstacole = obj_joc_suprem.timp_obstacole;
alarm0 = 0;
sfarsit_joc = 0;
//save_best = 0;

next_gen = 0;
best_player = pointer_null;

instance_create(0,0,obj_interes);
var i;
for (i = 0; i &lt; obj_joc_suprem.numar_playeri; i += 1)
    instance_create(0,0,obj_player);

if(obj_joc_suprem.save_best == 1)    
    instance_create(0,0, obj_player_save)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
var some_alive = 0;
for (i = 0; i &lt; instance_number(obj_player); i += 1){
    player = instance_find(obj_player,i);
    
    if(player.dead == 0){
        some_alive = 1;
    }
}
if(instance_exists(obj_player_save)){
    if(obj_player_save.dead == 0)
        some_alive = 1;
}

//if(best_player != pointer_null)
    //if(best_player.next_gen==1){
        //show_message("Next GEN!");
        //room_restart();
    //}

if(some_alive == 0){
    var max_points = -1;
    sfarsit_joc = 1;
    hsp = 0;
    
    for (i = 0; i &lt; instance_number(obj_player); i += 1){
        player = instance_find(obj_player,i);
        
        if(player.points &gt; max_points){
            best_player = player;
            max_points = player.points;
        }
    }
    
    if(max_points &gt; obj_joc_suprem.best_score)
        obj_joc_suprem.best_score = max_points;
        
    if(instance_exists(obj_player_save)){
        if(best_player.points &lt; obj_player_save.points)
            best_player = obj_player_save;
    }
    
    best_player.reproducere = 1;
}else{

    if(alarm0 == 0){
        instance_create(room_width+sprite_get_width(spr_obstacol)/2, int64(random_range(200, room_height-200)), obj_obstacol)
        //instance_create(2000, room_height/2, obj_obstacol)

        alarm0 = timp_obstacole;
    }else{
        alarm0-=1;
    }
    
    points += 0.01;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
