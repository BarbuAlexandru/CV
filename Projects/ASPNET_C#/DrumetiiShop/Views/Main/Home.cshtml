@using DrumetiiShop.Models
@using DrumetiiShop.ViewModels

@model DrumetiiShop.ViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home";
}

<style>
    .buttons {
        width: 105px;
        height: 30px;
        font-size: 18px;
        background-color: #87CDFF;
        color: #2C3517;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-weight: bold;
        border-style: solid;
        border-width: 1px;
    }

    a:hover {
        color: black;
    }

    .autocomplete-items {
        position:absolute;
        border: 1px solid #d4d4d4;
        width: 300px;
    }
    
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }
    
    /*when hovering an item:*/
    .autocomplete-items div:hover {
        background-color: #e9e9e9;
    }
    
    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important; 
        color: #ffffff; 
    }
</style>

<div>
    <div style="text-align:center;">
        <h1 class="display-4">Welcome to Drumetii Shop</h1>
        <p style="font-size:25px">Made by Barbu Mircea</p><br><br>
    </div>

    <div id="SearchProducts">
        <h1 style="font-size:30px">Search Products</h1><br>
        @using (Html.BeginForm("Home", "Main", FormMethod.Get))
        {
            <div>
                <input class="autocomplete" style="width:300px;" id="searchString" name="searchString" type="text" placeholder="Search for a product..." autocomplete="off" />
                <input class="buttons" type="submit" value="Search" />
                @if (Model.SearchedText != null)
                {
                    <a style="float:right; font-size:20px;" asp-controller="Main" asp-action="Home">Clear</a>
                    <p style="float:right; font-size:20px; margin-right:10px;">Searched Text: @(Model.SearchedText)</p>
                }
            </div>
        }
        <br><br>
    </div>

    <h1 style="font-size:30px">Product Categories</h1><br>
    <div id="products">
        @foreach (var category in Model.Categories)
        {
            <p style="font-size:25px">@category</p>
            @foreach (var product in Model.Products)
            {
                @if (String.Equals(product.Category, category))
                {
                    <table style="display: inline-block;" border="0">
                        <tbody>
                            <tr>
                                <td>
                                    <table style="text-align:center; width:220px;" border="1">
                                        <tr>
                                            <th>@product.Name</th>
                                        </tr>
                                        <tr>
                                            <td>
                                                <img src="~/media/products/pictures/@(Program.StandardizeText(product.Name)).png" \>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="white-space: nowrap; overflow: hidden; max-width: 220px; text-overflow: ellipsis;">
                                                <b>Description</b><br>
                                                @product.Description
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <b>Price: @(product.Price) lei</b>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <a class="buttons" asp-controller="Main" asp-action="SeeProduct" asp-route-Id="@product.Id">See Product</a>
                                                <a class="buttons" asp-controller="Main" asp-action="AddProductToCart" asp-route-Id="@product.Id">Add to Cart</a>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            }
            <br><br>
        }
    </div>
    @if (Model.Products.Count() == 0)
    {
        <div>
            <p style="font-size:30px;">There were no products found</p>
            <a style="font-size:30px;" asp-controller="Main" asp-action="Home">Clear Search</a>
        </div>
    }
</div>


<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item contains the text field value:*/
                if (arr[i].toUpperCase().includes(val.toUpperCase())) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold - Removed because its not only the first letters:*/
                    /*b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";*/
                    b.innerHTML = arr[i].substr(0, val.length);
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });

        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });

        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }

        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }

        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }

        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    /*An array containing all the country names in the world:*/
    var allProducts = JSON.parse('@Html.Raw(Json.Serialize(@Model.AllProductNames))');

    /*initiate the autocomplete function on the "myInput" element, and pass along the products array as possible autocomplete values:*/
    autocomplete(document.getElementById("searchString"), allProducts);
</script>


